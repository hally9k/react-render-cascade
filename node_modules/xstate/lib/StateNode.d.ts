import { Event, StateValue, Action, StandardMachine, ParallelMachine, SimpleOrCompoundStateNodeConfig, MachineConfig, ParallelMachineConfig, EventType, StandardMachineConfig, StateNodeConfig, Activity, ConditionalTransitionConfig } from './types';
import { State } from './State';
declare class StateNode implements StateNodeConfig {
    config: SimpleOrCompoundStateNodeConfig | StandardMachineConfig | ParallelMachineConfig;
    key: string;
    id: string;
    path: string[];
    initial?: string;
    parallel?: boolean;
    states: Record<string, StateNode>;
    on: Record<string, ConditionalTransitionConfig>;
    onEntry?: Action[];
    onExit?: Action[];
    activities?: Activity[];
    strict: boolean;
    parent?: StateNode;
    machine: StateNode;
    data: object | undefined;
    delimiter: string;
    private __cache;
    private idMap;
    constructor(config: SimpleOrCompoundStateNodeConfig | StandardMachineConfig | ParallelMachineConfig);
    getStateNodes(state: StateValue | State): StateNode[];
    handles(event: Event): boolean;
    transition(state: StateValue | State, event: Event, extendedState?: any): State;
    private stateTransitionToState(stateTransition, prevState);
    getStateNode(stateKey: string): StateNode;
    getStateNodeById(stateId: string): StateNode;
    private resolve(stateValue);
    private transitionStateValue(state, event, fullState, extendedState?);
    private next(event, fullState, history?, extendedState?);
    private readonly resolvedStateValue;
    private getResolvedPath(stateIdentifier);
    private readonly initialStateValue;
    readonly initialState: State;
    getStates(stateValue: StateValue): StateNode[];
    getState(relativeStateId: string | string[]): StateNode | undefined;
    readonly events: EventType[];
    private formatTransitions(onConfig);
}
export declare function Machine(config: MachineConfig | ParallelMachineConfig): StandardMachine | ParallelMachine;
export { StateNode };
