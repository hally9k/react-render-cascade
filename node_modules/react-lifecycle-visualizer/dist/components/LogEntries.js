'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LogEntries = function (_Component) {
  _inherits(LogEntries, _Component);

  function LogEntries() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, LogEntries);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LogEntries.__proto__ || Object.getPrototypeOf(LogEntries)).call.apply(_ref, [this].concat(args))), _this), _this.highlight = function (index) {
      _this.props.highlight(index);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(LogEntries, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.entries.length !== this.props.entries.length) {
        this.messagesElt.scrollTop = this.messagesElt.scrollHeight - this.messagesElt.clientHeight;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var indexWidth = Math.max(2, 1 + Math.log10(this.props.entries.length));
      var componentNameWidth = 2 + Math.max.apply(Math, _toConsumableArray(this.props.entries.map(function (_ref2) {
        var componentName = _ref2.componentName,
            instanceId = _ref2.instanceId;
        return componentName.length + ('' + instanceId).length + 1;
      })));
      return _react2.default.createElement(
        'div',
        { className: 'entries', ref: function ref(elt) {
            _this2.messagesElt = elt;
          } },
        this.props.entries.map(function (_ref3, i) {
          var componentName = _ref3.componentName,
              instanceId = _ref3.instanceId,
              methodName = _ref3.methodName;
          return _react2.default.createElement(
            'div',
            { className: 'entry-wrapper', key: i },
            _react2.default.createElement(
              'div',
              {
                className: 'entry',
                'data-is-highlighted': i === _this2.props.highlightedIndex,
                onMouseEnter: function onMouseEnter() {
                  return _this2.highlight(i);
                }
              },
              ('' + i).padStart(indexWidth) + ' ' + (componentName + '-' + instanceId + ':').padEnd(componentNameWidth) + methodName
            )
          );
        })
      );
    }
  }]);

  return LogEntries;
}(_react.Component);

exports.default = LogEntries;