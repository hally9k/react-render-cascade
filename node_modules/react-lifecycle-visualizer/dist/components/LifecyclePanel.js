'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LifecyclePanel = function LifecyclePanel(props) {
  var componentName = props.componentName,
      isLegacy = props.isLegacy,
      instanceId = props.instanceId,
      highlightedMethod = props.highlightedMethod,
      implementedMethods = props.implementedMethods;

  var lifecycleMethodNames = isLegacy ? constants.lifecycleMethodNamesLegacy : constants.lifecycleMethodNames;

  return _react2.default.createElement(
    'div',
    { className: 'lifecycle-panel' },
    _react2.default.createElement(
      'div',
      { className: 'lifecycle-panel-inner' },
      _react2.default.createElement(
        'div',
        { className: 'component-instance' },
        componentName + '-' + instanceId
      ),
      lifecycleMethodNames.map(function (methodName) {
        return _react2.default.createElement(LifecycleMethod, {
          componentName: componentName,
          instanceId: instanceId,
          highlightedMethod: highlightedMethod,
          methodName: methodName,
          methodIsImplemented: implementedMethods.includes(methodName),
          key: methodName
        });
      })
    )
  );
};

var isHighlighted = function isHighlighted(hlMethod, method) {
  return hlMethod !== null && hlMethod.componentName === method.componentName && hlMethod.instanceId === method.instanceId && hlMethod.methodName.startsWith(method.methodName) // for handling 'setState:update fn' & 'setState:callback'
  ;
};

var LifecycleMethod = function LifecycleMethod(props) {
  var highlightedMethod = props.highlightedMethod,
      componentName = props.componentName,
      instanceId = props.instanceId,
      methodName = props.methodName,
      methodIsImplemented = props.methodIsImplemented;

  var methodIsHighlighted = isHighlighted(highlightedMethod, { componentName: componentName, instanceId: instanceId, methodName: methodName });
  return _react2.default.createElement(
    'div',
    {
      className: 'lifecycle-method',
      'data-is-implemented': methodIsImplemented,
      'data-is-highlighted': methodIsHighlighted
    },
    methodName
  );
};

var mapStateToProps = function mapStateToProps(_ref) {
  var logEntries = _ref.logEntries,
      highlightedIndex = _ref.highlightedIndex;
  return {
    highlightedMethod: highlightedIndex !== null && logEntries[highlightedIndex] ? logEntries[highlightedIndex] : null
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, null, null, { storeKey: constants.reduxStoreKey })(LifecyclePanel);