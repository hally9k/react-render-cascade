'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearInstanceIdCounters = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.default = traceLifecycle;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

var _actionCreators = require('./redux/actionCreators');

var ActionCreators = _interopRequireWildcard(_actionCreators);

var _LifecyclePanel = require('./components/LifecyclePanel');

var _LifecyclePanel2 = _interopRequireDefault(_LifecyclePanel);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var instanceIdCounters = {};
var traceSym = Symbol('trace'); // for sneaking trace function into the state

var clearInstanceIdCounters = exports.clearInstanceIdCounters = function clearInstanceIdCounters() {
  Object.keys(instanceIdCounters).forEach(function (k) {
    return delete instanceIdCounters[k];
  });
};

var mkInstanceId = function mkInstanceId(componentName) {
  if (!Object.prototype.hasOwnProperty.call(instanceIdCounters, componentName)) {
    instanceIdCounters[componentName] = 0;
  }
  instanceIdCounters[componentName] += 1;
  return instanceIdCounters[componentName];
};

function traceLifecycle(ComponentToTrace) {
  var superMethods = Object.getOwnPropertyNames(ComponentToTrace.prototype).concat(ComponentToTrace.getDerivedStateFromProps ? [_constants.MGetDerivedState] : []);

  var isLegacy = // component is legacy if it includes one of the legacy methods and no new methods.
  superMethods.some(function (member) {
    return constants.lifecycleMethodNamesLegacyOnly.includes(member);
  }) && superMethods.every(function (member) {
    return !constants.lifecycleMethodNamesNewOnly.includes(member);
  });

  var implementedMethods = [].concat(_toConsumableArray(superMethods), [_constants.MSetState]);

  var TracingComponent = function (_ComponentToTrace) {
    _inherits(TracingComponent, _ComponentToTrace);

    function TracingComponent(props, context) {
      _classCallCheck(this, TracingComponent);

      var _this = _possibleConstructorReturn(this, (TracingComponent.__proto__ || Object.getPrototypeOf(TracingComponent)).call(this, props, context));

      var instanceId = mkInstanceId(ComponentToTrace.name);

      _this.LifecyclePanel = function () {
        return _react2.default.createElement(_LifecyclePanel2.default, {
          componentName: ComponentToTrace.name,
          isLegacy: isLegacy,
          instanceId: instanceId,
          implementedMethods: implementedMethods
        });
      };

      _this.trace = function (methodName) {
        _this.context[constants.reduxStoreKey].dispatch(ActionCreators.trace(ComponentToTrace.name, instanceId, methodName));
      };

      // HACK: need trace in state since static getDerivedStateFromProps can't access instance or context :-(
      if (!Object.prototype.hasOwnProperty.call(_this, 'state')) {
        _this.state = {};
      }
      if (_typeof(_this.state) === 'object') {
        // check the rare case of a non-object state (which yields a React warning)
        _this.state[traceSym] = _this.trace.bind(_this);
      }
      _this.trace(_constants.MConstructor);
      return _this;
    }

    // Get store directly from context, to prevent introducing extra `Connect` component.


    _createClass(TracingComponent, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.trace(_constants.MWillMount);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillMount', this)) {
          _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillMount', this).call(this);
        }
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.trace(_constants.MDidMount);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentDidMount', this)) {
          _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentDidMount', this).call(this);
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.trace(_constants.MWillUnmount);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillUnmount', this)) {
          _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillUnmount', this).call(this);
        }
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps() {
        this.trace(_constants.MWillReceiveProps);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillReceiveProps', this)) {
          var _get2;

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          (_get2 = _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillReceiveProps', this)).call.apply(_get2, [this].concat(args));
        }
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate() {
        var _get3;

        this.trace(_constants.MShouldUpdate);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'shouldComponentUpdate', this) ? (_get3 = _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'shouldComponentUpdate', this)).call.apply(_get3, [this].concat(args)) : true;
      }
    }, {
      key: 'componentWillUpdate',
      value: function componentWillUpdate() {
        this.trace(_constants.MWillUpdate);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillUpdate', this)) {
          var _get4;

          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          (_get4 = _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentWillUpdate', this)).call.apply(_get4, [this].concat(args));
        }
      }
    }, {
      key: 'render',
      value: function render() {
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'render', this)) {
          this.trace(_constants.MRender);
          return _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'render', this).call(this);
        }
        return undefined; // no super.render, this will trigger a React error
      }
    }, {
      key: 'getSnapshotBeforeUpdate',
      value: function getSnapshotBeforeUpdate() {
        var _get5;

        this.trace(_constants.MGetSnapshot);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'getSnapshotBeforeUpdate', this) ? (_get5 = _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'getSnapshotBeforeUpdate', this)).call.apply(_get5, [this].concat(args)) : null;
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        this.trace(_constants.MDidUpdate);
        if (_get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentDidUpdate', this)) {
          var _get6;

          for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          (_get6 = _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'componentDidUpdate', this)).call.apply(_get6, [this].concat(args));
        }
      }
    }, {
      key: 'setState',
      value: function setState(updater, callback) {
        var _this2 = this;

        this.trace(_constants.MSetState);

        // Unlike the lifecycle methods we only trace the update function and callback
        // when they are actually defined.
        var tracingUpdater = typeof updater !== 'function' ? updater : function () {
          _this2.trace(_constants.MSetState + ':update fn');
          return updater.apply(undefined, arguments);
        };

        var tracingCallback = !callback ? undefined : function () {
          _this2.trace(_constants.MSetState + ':callback');
          callback.apply(undefined, arguments);
        };
        _get(TracingComponent.prototype.__proto__ || Object.getPrototypeOf(TracingComponent.prototype), 'setState', this).call(this, tracingUpdater, tracingCallback);
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var trace = prevState[traceSym] ? prevState[traceSym] : function () {};
        trace(_constants.MGetDerivedState);

        return ComponentToTrace.getDerivedStateFromProps ? ComponentToTrace.getDerivedStateFromProps(nextProps, prevState, trace)
        // Pass trace as third argument, since this.trace is unavailable in static method.
        : null;
      }
    }]);

    return TracingComponent;
  }(ComponentToTrace);

  TracingComponent.contextTypes = _extends({}, ComponentToTrace.contextTypes, _defineProperty({}, constants.reduxStoreKey, _propTypes2.default.object));


  TracingComponent.displayName = 'traceLifecycle(' + (ComponentToTrace.displayName || ComponentToTrace.name || 'Component') + ')';

  // Removing the inappropriate methods is simpler than adding appropriate methods to prototype
  if (isLegacy) {
    delete TracingComponent.getDerivedStateFromProps;
    delete TracingComponent.prototype.getSnapshotBeforeUpdate;
  } else {
    delete TracingComponent.prototype.componentWillMount;
    delete TracingComponent.prototype.componentWillReceiveProps;
    delete TracingComponent.prototype.componentWillUpdate;
  }

  return TracingComponent;
}