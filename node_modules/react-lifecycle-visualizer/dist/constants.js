'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var shouldLogInConsole = exports.shouldLogInConsole = false;

var delayValues = exports.delayValues = [0.25, 0.5, 1, 2, 5, 10];

var MConstructor = exports.MConstructor = 'constructor';
var MDidMount = exports.MDidMount = 'componentDidMount';
var MShouldUpdate = exports.MShouldUpdate = 'shouldComponentUpdate';
var MRender = exports.MRender = 'render';
var MDidUpdate = exports.MDidUpdate = 'componentDidUpdate';
var MWillUnmount = exports.MWillUnmount = 'componentWillUnmount';
var MSetState = exports.MSetState = 'setState';

var MGetDerivedState = exports.MGetDerivedState = 'static getDerivedStateFromProps';
var MGetSnapshot = exports.MGetSnapshot = 'getSnapshotBeforeUpdate';

var MWillMount = exports.MWillMount = 'componentWillMount';
var MWillReceiveProps = exports.MWillReceiveProps = 'componentWillReceiveProps';
var MWillUpdate = exports.MWillUpdate = 'componentWillUpdate';

var lifecycleMethods = [{ isLegacy: false, isNew: false, name: MConstructor }, { isLegacy: true, isNew: false, name: MWillMount }, { isLegacy: false, isNew: true, name: MGetDerivedState }, { isLegacy: true, isNew: false, name: MWillReceiveProps }, { isLegacy: false, isNew: false, name: MShouldUpdate }, { isLegacy: true, isNew: false, name: MWillUpdate }, { isLegacy: false, isNew: false, name: MRender }, { isLegacy: false, isNew: false, name: MDidMount }, { isLegacy: false, isNew: true, name: MGetSnapshot }, { isLegacy: false, isNew: false, name: MDidUpdate }, { isLegacy: false, isNew: false, name: MWillUnmount }, { isLegacy: false, isNew: false, name: MSetState }];

var lifecycleMethodNames = exports.lifecycleMethodNames = lifecycleMethods.filter(function (mthd) {
  return !mthd.isLegacy;
}).map(function (_ref) {
  var name = _ref.name;
  return name;
});

var lifecycleMethodNamesLegacy = exports.lifecycleMethodNamesLegacy = lifecycleMethods.filter(function (mthd) {
  return !mthd.isNew;
}).map(function (_ref2) {
  var name = _ref2.name;
  return name;
});

var lifecycleMethodNamesNewOnly = exports.lifecycleMethodNamesNewOnly = lifecycleMethods.filter(function (mthd) {
  return mthd.isNew;
}).map(function (_ref3) {
  var name = _ref3.name;
  return name;
});

var lifecycleMethodNamesLegacyOnly = exports.lifecycleMethodNamesLegacyOnly = lifecycleMethods.filter(function (mthd) {
  return mthd.isLegacy;
}).map(function (_ref4) {
  var name = _ref4.name;
  return name;
});

var reduxStoreKey = exports.reduxStoreKey = 'lifecycleVisualizerStore';

var sessionStorageKey = '@@react-lifecycle-visualizer--persistent-state:';
var sessionReplayTimerDelayKey = exports.sessionReplayTimerDelayKey = sessionStorageKey + 'replayTimerDelay';