'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDelay = exports.setReplayTimerDelay = exports.clearLog = exports.trace = exports.stepLog = exports.highlight = exports.startReplay = exports.pauseReplay = undefined;

var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

var _util = require('../util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Primitive actions:

/* global sessionStorage:false */
/* eslint no-unused-vars: [1, { "args": "none" }] */
var addLogEntry = function addLogEntry(componentName, instanceId, methodName) {
  return { type: 'ADD_LOG_ENTRY', componentName: componentName, instanceId: instanceId, methodName: methodName };
};

var clearLogEntries = function clearLogEntries() {
  return { type: 'CLEAR_LOG_ENTRIES' };
};

var setHighlight = function setHighlight(highlightedIndex) {
  return { type: 'SET_HIGHLIGHT', highlightedIndex: highlightedIndex };
};

var setReplayTimerId = function setReplayTimerId(replayTimerId) {
  return { type: 'SET_REPLAY_TIMER_ID', replayTimerId: replayTimerId };
};

var setReplayTimerDelayPrim = function setReplayTimerDelayPrim(replayTimerDelay) {
  return { type: 'SET_REPLAY_TIMER_DELAY', replayTimerDelay: replayTimerDelay };
};

// Thunk actions:

var pauseReplay = exports.pauseReplay = function pauseReplay() {
  return function (dispatch, getState) {
    var _getState = getState(),
        replayTimerId = _getState.replayTimerId;

    if (replayTimerId !== null) {
      clearInterval(replayTimerId);
      dispatch(setReplayTimerId(null));
    }
  };
};

var replayStep = function replayStep() {
  return function (dispatch, getState) {
    var _getState2 = getState(),
        highlightedIndex = _getState2.highlightedIndex,
        logEntries = _getState2.logEntries;

    if (highlightedIndex < logEntries.length - 1) {
      dispatch(setHighlight(highlightedIndex + 1));
    } else {
      dispatch(pauseReplay());
    }
  };
};

var startReplay = exports.startReplay = function startReplay() {
  return function (dispatch, getState) {
    var _getState3 = getState(),
        replayTimerId = _getState3.replayTimerId,
        replayTimerDelay = _getState3.replayTimerDelay;

    if (replayTimerId === null) {
      var timerId = setInterval(function () {
        return dispatch(replayStep());
      }, replayTimerDelay * 1000);
      dispatch(setReplayTimerId(timerId));
    }
  };
};

var highlight = exports.highlight = function highlight(highlightedIndex) {
  return function (dispatch, getState) {
    dispatch(pauseReplay());
    dispatch(setHighlight(highlightedIndex));
  };
};

var stepLog = exports.stepLog = function stepLog(step) {
  return function (dispatch, getState) {
    var _getState4 = getState(),
        highlightedIndex = _getState4.highlightedIndex,
        logEntries = _getState4.logEntries;

    dispatch(pauseReplay());
    var newIndex = highlightedIndex + step;
    var clippedIndex = Math.min(logEntries.length - 1, Math.max(0, newIndex));
    dispatch(setHighlight(clippedIndex));
  };
};

var trace = exports.trace = function trace(componentName, instanceId, methodName) {
  return function (dispatch, getState) {
    if (constants.shouldLogInConsole) {
      /* eslint no-console: 0 */
      console.log(util.getTimeStamp() + ' ' + componentName + '-' + instanceId + ': ' + methodName);
    }

    setTimeout(function () {
      // Async, so we can log from render
      var _getState5 = getState(),
          logEntries = _getState5.logEntries,
          replayTimerId = _getState5.replayTimerId;

      dispatch(addLogEntry(componentName, instanceId, methodName));
      if (replayTimerId === null) {
        dispatch(setHighlight(logEntries.length));
        dispatch(startReplay());
      }
    }, 0);
  };
};

var clearLog = exports.clearLog = function clearLog() {
  return function (dispatch, getState) {
    dispatch(pauseReplay());
    dispatch(clearLogEntries());
  };
};

var setReplayTimerDelay = exports.setReplayTimerDelay = function setReplayTimerDelay(replayTimerDelay) {
  return function (dispatch, getState) {
    sessionStorage.setItem(constants.sessionReplayTimerDelayKey, replayTimerDelay);
    dispatch(setReplayTimerDelayPrim(replayTimerDelay));
  };
};

var setDelay = exports.setDelay = function setDelay(replayTimerDelay) {
  return function (dispatch, getState) {
    dispatch(setReplayTimerDelay(replayTimerDelay));

    var _getState6 = getState(),
        replayTimerId = _getState6.replayTimerId;

    if (replayTimerId !== null) {
      dispatch(pauseReplay());
      var timerId = setInterval(function () {
        return dispatch(replayStep());
      }, replayTimerDelay * 1000);
      dispatch(setReplayTimerId(timerId));
    }
  };
};