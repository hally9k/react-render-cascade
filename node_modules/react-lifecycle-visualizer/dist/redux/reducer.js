'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* global sessionStorage:false */


var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var sessionReplayTimerDelay = sessionStorage.getItem(constants.sessionReplayTimerDelayKey);

var initialState = {
  logEntries: [],
  highlightedIndex: null,
  replayTimerId: null,
  replayTimerDelay: sessionReplayTimerDelay ? +sessionReplayTimerDelay : constants.delayValues[1]
};

var reducer = exports.reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments[1];

  // console.log('reducing', action, state);
  switch (action.type) {
    case 'ADD_LOG_ENTRY':
      {
        var componentName = action.componentName,
            instanceId = action.instanceId,
            methodName = action.methodName;

        return _extends({}, state, {
          logEntries: [].concat(_toConsumableArray(state.logEntries), [{ componentName: componentName, instanceId: instanceId, methodName: methodName }])
        });
      }
    case 'CLEAR_LOG_ENTRIES':
      {
        return _extends({}, state, { logEntries: [] });
      }
    case 'SET_HIGHLIGHT':
      {
        return _extends({}, state, { highlightedIndex: action.highlightedIndex });
      }
    case 'SET_REPLAY_TIMER_ID':
      {
        return _extends({}, state, { replayTimerId: action.replayTimerId });
      }
    case 'SET_REPLAY_TIMER_DELAY':
      {
        return _extends({}, state, { replayTimerDelay: action.replayTimerDelay });
      }
    default:
      {
        return state;
      }
  }
};